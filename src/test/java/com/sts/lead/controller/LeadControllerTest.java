package com.sts.lead.controller;


import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.sts.lead.entities.Lead;
import com.sts.lead.model.ErrorResponse;
import com.sts.lead.model.LeadDTO;
import com.sts.lead.model.LeadResponse;
import com.sts.lead.services.LeadService;

@ExtendWith(MockitoExtension.class)
public class LeadControllerTest {

    @Mock
    private LeadService leadService;

    @InjectMocks
    private LeadController leadController;

    @Test
    public void testCreateLeadSuccess() {
    	LeadDTO leadDTO = new LeadDTO(
    		    null,        // leadId - null or any default value as it's generated by the database
    		    "John",      // firstName
    		    "M",         // middleName
    		    "Doe",       // lastName
    		    "9876543210",// mobileNumber
    		    "Male",      // gender
    		    "01/15/1985",// dob
    		    "john.doe@example.com" // email
    		    // Set other necessary properties...
    		);
        LeadResponse successResponse = new LeadResponse("success", "Created Leads Successfully");

        when(leadService.createLead(leadDTO)).thenReturn(successResponse);

        ResponseEntity<Object> responseEntity = leadController.createLead(leadDTO);

        // Assert the response
        // Assuming success response should return HttpStatus.CREATED
        // You can modify this based on your actual logic
        assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());
        assertEquals(successResponse, responseEntity.getBody());

        // Verify that the service method was called
        verify(leadService, times(1)).createLead(leadDTO);
    }

    @Test
    public void testCreateLeadFailure() {
    	LeadDTO leadDTO = new LeadDTO(
    		    null,        // leadId - null or any default value as it's generated by the database
    		    "John",      // firstName
    		    "M",         // middleName
    		    "Doe",       // lastName
    		    "9876543210",// mobileNumber
    		    "Male",      // gender
    		    "01/15/1985",// dob
    		    "john.doe@example.com" // email
    		    // Set other necessary properties...
    		);
        LeadResponse failureResponse = new LeadResponse("error", new ErrorResponse("E10010", "Lead Already Exists in the database with the lead id"));

        when(leadService.createLead(leadDTO)).thenReturn(failureResponse);

        ResponseEntity<Object> responseEntity = leadController.createLead(leadDTO);

        // Assert the response
        // Assuming failure response should return HttpStatus.BAD_REQUEST
        // You can modify this based on your actual logic
        assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());
        assertEquals(failureResponse, responseEntity.getBody());

        // Verify that the service method was called
        verify(leadService, times(1)).createLead(leadDTO);
    }
    
    @Test
    public void testGetLeadsByMobileNumber_Success() {
        // Given
        String mobileNumber = "8877887788";
        List<Lead> leads = Arrays.asList(
                new Lead(5678, "Vineet", "", "KV", "8877887788", "Male", "01/01/1990", "v@gmail.com"),
                new Lead(5679, "Vishal", "", "Sonar", "8877887788", "Male", "02/02/1995", "vi@gmail.com")
                // Add more Lead objects as needed
        );

        // When
        when(leadService.getLeadsByMobileNumber(mobileNumber)).thenReturn(leads);

        // Then
        ResponseEntity<LeadResponse> responseEntity = leadController.getLeadsByMobileNumber(mobileNumber);

        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertEquals("success", responseEntity.getBody().getStatus());
        assertEquals(leads, responseEntity.getBody().getData());
        verify(leadService, times(1)).getLeadsByMobileNumber(mobileNumber);
    }

    @Test
    public void testGetLeadsByMobileNumber_NotFound() {
        // Given
        String mobileNumber = "1234567890";

        // When
        when(leadService.getLeadsByMobileNumber(mobileNumber)).thenReturn(Collections.emptyList());

        // Then
        ResponseEntity<LeadResponse> responseEntity = leadController.getLeadsByMobileNumber(mobileNumber);

        assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());
        assertEquals("error", responseEntity.getBody().getStatus());
        verify(leadService, times(1)).getLeadsByMobileNumber(mobileNumber);
    }
}