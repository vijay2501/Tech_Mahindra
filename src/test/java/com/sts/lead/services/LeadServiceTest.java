package com.sts.lead.services;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.sts.lead.entities.Lead;
import com.sts.lead.model.ErrorResponse;
import com.sts.lead.model.LeadDTO;
import com.sts.lead.model.LeadResponse;
import com.sts.lead.repository.LeadRepository;

@ExtendWith(MockitoExtension.class)
public class LeadServiceTest {

    @Mock
    private LeadRepository leadRepository;

    @InjectMocks
    private LeadService leadService;

    @Test
    public void testCreateLeadSuccess() {
        // Set necessary properties for LeadDTO
    	LeadDTO leadDTO = new LeadDTO(
    		    null,        // leadId - null or any default value as it's generated by the database
    		    "John",      // firstName
    		    "M",         // middleName
    		    "Doe",       // lastName
    		    "9876543210",// mobileNumber
    		    "Male",      // gender
    		    "01/15/1985",// dob
    		    "john.doe@example.com" // email
    		    // Set other necessary properties...
    		);

        when(leadRepository.existsByLeadId(leadDTO.getLeadId())).thenReturn(false);
        when(leadRepository.save(any(Lead.class))).thenReturn(new Lead());

        LeadResponse response = leadService.createLead(leadDTO);

        // Assert the response
        assertEquals("success", response.getStatus());
        assertEquals("Created Leads Successfully", response.getData());

        // Verify that the repository methods were called
        verify(leadRepository, times(1)).existsByLeadId(leadDTO.getLeadId());
        verify(leadRepository, times(1)).save(any(Lead.class));
    }

    @Test
    public void testCreateLeadFailure() {
    	LeadDTO leadDTO = new LeadDTO(
    		    null,        // leadId - null or any default value as it's generated by the database
    		    "John",      // firstName
    		    "M",         // middleName
    		    "Doe",       // lastName
    		    "9876543210",// mobileNumber
    		    "Male",      // gender
    		    "01/15/1985",// dob
    		    "john.doe@example.com" // email
    		    // Set other necessary properties...
    		);

        when(leadRepository.existsByLeadId(leadDTO.getLeadId())).thenReturn(true);

        LeadResponse response = leadService.createLead(leadDTO);

        // Assert the response
        assertEquals("error", response.getStatus());
        assertTrue(response.getData() instanceof ErrorResponse);

        // Verify that the repository methods were called
        verify(leadRepository, times(1)).existsByLeadId(leadDTO.getLeadId());
        verify(leadRepository, never()).save(any(Lead.class));
    }
}
